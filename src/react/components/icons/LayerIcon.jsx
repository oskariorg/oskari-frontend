import PropTypes from 'prop-types';
import React, { Fragment } from 'react';
import { Icon, Tooltip, Message } from 'oskari-ui';

const defaultColor = '#979797';

const ThreeDSvg = ({ fill = defaultColor }) => (
    <svg width="20px" height="20px" viewBox="0 0 20 20">
        <g stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
            <g transform="translate(-10.000000, -10.000000)" fill={fill}>
                <path d="M14.7105482,15 C15.1116112,15 15.5126681,15.0596811 15.913731,15.1790451 C16.314794,15.298409 16.6752678,15.4774535 16.9951632,15.7161802 C17.3150586,15.954907 17.5752682,16.2461519 17.7757997,16.5899201 C17.9763311,16.9336884 18.0765954,17.3299708 18.0765954,17.7787793 C18.0765954,18.2657843 17.9596204,18.6954882 17.725667,19.0679038 C17.4917137,19.4403194 17.1407889,19.6933672 16.6728821,19.8270548 L16.6728821,19.8270548 L16.6728821,19.8557021 C17.2267309,19.9798406 17.6612092,20.2472119 17.9763301,20.6578239 C18.291451,21.068436 18.4490091,21.5602082 18.4490091,22.1331552 C18.4490091,22.6583567 18.3463576,23.1262564 18.1410516,23.5368685 C17.9357456,23.9474806 17.6612125,24.2912436 17.3174443,24.5681681 C16.9736761,24.8450925 16.5773936,25.0551699 16.1285851,25.1984067 C15.6797766,25.3416434 15.2118768,25.4132607 14.7248718,25.4132607 C14.1614739,25.4132607 13.6482165,25.3320945 13.1850843,25.1697595 C12.7219521,25.0074245 12.3280569,24.7710873 12.0033869,24.460741 C11.6787169,24.1503947 11.4280563,23.770823 11.2513976,23.3220144 C11.074739,22.8732059 10.9911854,22.3575613 11.0007346,21.7750651 L11.0007346,21.7750651 L12.9344212,21.7750651 C12.9439703,22.0424404 12.9869407,22.2978755 13.0633337,22.541378 C13.1397266,22.7848805 13.2495398,22.9949579 13.3927766,23.1716166 C13.5360133,23.3482753 13.7150566,23.4891226 13.9299118,23.5941629 C14.1447669,23.6992032 14.400202,23.7517226 14.6962246,23.7517226 C15.1545823,23.7517226 15.5413157,23.6108752 15.8564366,23.3291762 C16.1715575,23.0474773 16.3291156,22.663131 16.3291156,22.176126 C16.3291156,21.7941613 16.255111,21.5029176 16.1070997,21.3023861 C15.9590884,21.1018547 15.7704961,20.9562328 15.5413173,20.8655162 C15.3121385,20.7747996 15.0614779,20.7222802 14.789328,20.7079565 C14.5171782,20.6936329 14.2569686,20.6864711 14.0086916,20.6864711 L14.0086916,20.6864711 L14.0086916,19.2541106 C14.2283213,19.2732089 14.4622712,19.2732089 14.7105482,19.2541106 C14.9588253,19.2350124 15.1903879,19.1801058 15.4052431,19.0893892 C15.6200982,18.9986726 15.7967542,18.8673742 15.9352164,18.6954901 C16.0736786,18.5236059 16.1429087,18.2944306 16.1429087,18.007957 C16.1429087,17.5782467 15.9996741,17.2488071 15.7132006,17.0196283 C15.426727,16.7904495 15.0972874,16.6758618 14.7248718,16.6758618 C14.2092195,16.6758618 13.8200988,16.8453561 13.557498,17.1843497 C13.2948973,17.5233434 13.1683734,17.95066 13.1779225,18.4663124 L13.1779225,18.4663124 L11.2442358,18.4663124 C11.2633341,17.95066 11.3564366,17.480373 11.5235461,17.0554373 C11.6906557,16.6305016 11.9246056,16.2652533 12.2254028,15.9596815 C12.5262,15.6541098 12.8866738,15.4177726 13.3068349,15.2506631 C13.7269961,15.0835535 14.1948959,15 14.7105482,15 Z M24.106833,15 C24.7657221,15 25.3792437,15.1050387 25.9474162,15.3151193 C26.5155887,15.5251999 27.0073609,15.8403161 27.4227475,16.2604772 C27.8381342,16.6806384 28.1627993,17.205832 28.3967527,17.8360738 C28.6307061,18.4663155 28.747681,19.206361 28.747681,20.0562325 C28.747681,20.8010637 28.6521913,21.4885899 28.4612089,22.1188316 C28.2702265,22.7490734 27.9813701,23.2933649 27.5946308,23.7517226 C27.2078915,24.2100802 26.7256683,24.570554 26.1479467,24.8331547 C25.5702251,25.0957555 24.8898607,25.2270539 24.106833,25.2270539 L19.6951627,25.2270539 L19.6951627,15 L24.106833,15 Z M23.5482124,16.8907158 L21.9439687,16.8907158 L21.9439687,23.336338 L23.9492734,23.336338 C24.2739434,23.336338 24.5890595,23.2838187 24.8946313,23.1787784 C25.2002031,23.0737381 25.4723488,22.8994693 25.7110768,22.6559668 C25.9498047,22.4124643 26.1407842,22.0949609 26.284021,21.7034471 C26.4272577,21.3119333 26.498875,20.8344845 26.498875,20.2710866 C26.498875,19.7554368 26.4487429,19.2899217 26.3484772,18.8745351 C26.2482114,18.4591485 26.0834916,18.1034492 25.8543128,17.8074266 C25.625134,17.5114039 25.3219541,17.2846158 24.9447639,17.1270553 C24.5675738,16.9694949 24.1020613,16.8907158 23.5482124,16.8907158 Z" id="Combined-Shape"></path>
            </g>
        </g>
    </svg>
);
ThreeDSvg.propTypes = {
    fill: PropTypes.string
};

const TimeSerieSvg = ({ fill = defaultColor }) => (
    <svg width="20px" height="20px" viewBox="0 0 20 20">
        <g stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
            <g transform="translate(-10.000000, -10.000000)" fill={fill}>
                <path d="M20,12 C24.418278,12 28,15.581722 28,20 C28,24.418278 24.418278,28 20,28 C15.581722,28 12,24.418278 12,20 C12,15.581722 15.581722,12 20,12 Z M20.6,14.5 L19.4,14.5 L19.4,21.3211103 L22.6671799,23.4992302 L23.3328201,22.5007698 L20.6,20.6788897 L20.6,14.5 Z" id="Combined-Shape"></path>
            </g>
        </g>
    </svg>
);
TimeSerieSvg.propTypes = {
    fill: PropTypes.string
};

const OwnSvg = ({ fill = defaultColor }) => (
    <svg width="20px" height="20px" viewBox="0 0 20 20">
        <g stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
            <g transform="translate(-10.000000, -10.000000)" fill={fill}>
                <path d="M23.2384325,20.6447688 C25.9714488,21.8622653 27.8995418,24.574266 27.9961932,27.7495405 L28,28 L12,28 C12,24.7173706 13.9569452,21.8941583 16.7621746,20.64472 C17.6594302,21.3354466 18.7820371,21.7458119 20,21.7458119 C21.2179629,21.7458119 22.3405698,21.3354466 23.2384325,20.6447688 Z M20.0942872,12 C22.3294629,12 24.1414309,13.8212767 24.1414309,16.0679353 C24.1414309,18.3145939 22.3294629,20.1358706 20.0942872,20.1358706 C17.8591115,20.1358706 16.0471436,18.3145939 16.0471436,16.0679353 C16.0471436,13.8212767 17.8591115,12 20.0942872,12 Z" id="Combined-Shape"></path>
            </g>
        </g>
    </svg>
);
OwnSvg.propTypes = {
    fill: PropTypes.string
};

const ThemeMapSvg = ({ fill = defaultColor }) => (
    <svg width="20px" height="20px" viewBox="0 0 20 20">
        <g stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
            <g transform="translate(-10.000000, -10.000000)" fill={fill}>
                <path d="M15.2,12 L15.2,28 L12,28 L12,12 L15.2,12 Z M21.6,16.6222222 L21.6,28 L18.4,28 L18.4,16.6222222 L21.6,16.6222222 Z M28,21.1733333 L28,28 L24.8,28 L24.8,21.1733333 L28,21.1733333 Z" id="Combined-Shape"></path>
            </g>
        </g>
    </svg>
);
ThemeMapSvg.propTypes = {
    fill: PropTypes.string
};

const VectorSvg = ({ fill = defaultColor }) => (
    <svg width="20px" height="20px" viewBox="0 0 20 20">
        <g stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
            <g transform="translate(-10.000000, -10.000000)" fill={fill}>
                <path d="M28.000002,22.9528477 C28.000002,24.6357435 24.4180795,26 19.9995567,26 C15.6973108,26 12.1882149,24.7066017 12.006505,23.0850269 C12.0036156,21.6431212 12.001448,20.561692 12.000002,19.8407392 C11.9997071,19.6925972 12.0328457,19.69913 12.0978016,19.8446606 C12.7021948,21.1987764 16.0098219,22.1910597 19.9995567,22.1910597 C24.0052208,22.1910597 27.316733,21.0511896 27.9018351,19.6718554 C27.9451564,19.5697287 27.9929938,19.5817649 27.9931865,19.6744906 C27.9947006,20.4030144 27.9969724,21.4958001 28.000002,22.9528477 Z M20.000002,14 C24.4182784,14 28.000002,15.4326888 28.000002,17.2 C28.000002,18.9673112 24.4182784,20.4 20.000002,20.4 C15.5817235,20.4 12.000002,18.9673112 12.000002,17.2 C12.000002,15.4326888 15.5817235,14 20.000002,14 Z" id="Shape-Copy"></path>
            </g>
        </g>
    </svg>
);
VectorSvg.propTypes = {
    fill: PropTypes.string
};

const RasterSvg = ({ fill = defaultColor }) => (
    <svg width="20px" height="20px" viewBox="0 0 20 20">
        <g stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
            <g transform="translate(-10.000000, -10.000000)" fill={fill}>
                <path d="M26.822,20.6490471 L27.6897848,21.1075254 C27.9339631,21.2364889 28.0273631,21.5389801 27.8983996,21.7831583 C27.8514267,21.8720963 27.7787228,21.9448002 27.6897848,21.9917731 L20.4670182,25.8064996 C20.1747992,25.960836 19.8252008,25.960836 19.5329818,25.8064996 L12.3102152,21.9917731 C12.0660369,21.8628096 11.9726369,21.5603184 12.1016004,21.3161402 C12.1485733,21.2272022 12.2212772,21.1544983 12.3102152,21.1075254 L13.178,20.6490471 L20,24.2517537 L26.822,20.6490471 Z M20.4670182,14.1403437 L27.6897848,17.9550702 C27.9339631,18.0840337 28.0273631,18.3865249 27.8983996,18.6307031 C27.8514267,18.7196411 27.7787228,18.792345 27.6897848,18.8393179 L20.4670182,22.6540444 C20.1747992,22.8083808 19.8252008,22.8083808 19.5329818,22.6540444 L12.3102152,18.8393179 C12.0660369,18.7103544 11.9726369,18.4078632 12.1016004,18.163685 C12.1485733,18.074747 12.2212772,18.0020431 12.3102152,17.9550702 L19.5329818,14.1403437 C19.8252008,13.9860073 20.1747992,13.9860073 20.4670182,14.1403437 Z" id="Combined-Shape-Copy-2"></path>
            </g>
        </g>
    </svg>
);
RasterSvg.propTypes = {
    fill: PropTypes.string
};

const ThreeDIcon = ({ fill, ...rest }) => <Icon component={() => <ThreeDSvg fill={fill}/>} {...rest} />;
ThreeDIcon.propTypes = {
    fill: PropTypes.string
};

const TimeSerieIcon = ({ fill, ...rest }) => <Icon component={() => <TimeSerieSvg fill={fill}/>} {...rest} />;
TimeSerieIcon.propTypes = {
    fill: PropTypes.string
};

const UserDataIcon = ({ fill, ...rest }) => <Icon component={() => <OwnSvg fill={fill}/>} {...rest} />;
UserDataIcon.propTypes = {
    fill: PropTypes.string
};

const ThemeMapIcon = ({ fill, ...rest }) => <Icon component={() => <ThemeMapSvg fill={fill}/>} {...rest} />;
ThemeMapIcon.propTypes = {
    fill: PropTypes.string
};

const DataLayerIcon = ({ fill, ...rest }) => <Icon component={() => <VectorSvg fill={fill}/>} {...rest} />;
DataLayerIcon.propTypes = {
    fill: PropTypes.string
};

const ImageLayerIcon = ({ fill, ...rest }) => <Icon component={() => <RasterSvg fill={fill}/>} {...rest} />;
ImageLayerIcon.propTypes = {
    fill: PropTypes.string
};

export const LayerIcon = ({ type, hasTimeseries = false, additionalTooltip, ...rest }) => {
    const getIcon = (type, rest) => {
        if (hasTimeseries) {
            return <TimeSerieIcon {...rest} />;
        }
        if (['wmts', 'wms', 'arcgis93', 'arcgis', 'vectortile', 'bingmaps'].includes(type)) {
            return <ImageLayerIcon {...rest} />;
        }
        if (['wfs'].includes(type)) {
            return <DataLayerIcon {...rest} />;
        }
        if (['userlayer', 'myplaces', 'analysislayer'].includes(type)) {
            return <UserDataIcon {...rest} />;
        }
        if (['tiles3d'].includes(type)) {
            return <ThreeDIcon {...rest} />;
        }
        return <DataLayerIcon {...rest} />;
    };

    let tooltipTitle = (<Message messageKey={ `layerTooltipTitle.${type}`  } bundleKey='oskariui' />);
    if (additionalTooltip) {
        tooltipTitle = (<Fragment>
            { tooltipTitle }. { additionalTooltip }
        </Fragment>);
    }

    return (
        <Tooltip title={ tooltipTitle }>
            { getIcon(type, rest) }
        </Tooltip>
    );
};

LayerIcon.propTypes = {
    type: PropTypes.string.isRequired,
    additionalTooltip: PropTypes.any,
    hasTimeseries: PropTypes.bool
};
